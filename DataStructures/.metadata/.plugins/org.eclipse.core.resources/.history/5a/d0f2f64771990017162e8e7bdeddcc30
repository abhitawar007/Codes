package tree;

import java.util.Scanner;

public class BinaryTree 
{
	Node rootNode = null;
	public BinaryTree()
	{
		Scanner in = new Scanner(System.in);
		while(true)
		{
			System.out.println("========= Level Order Tree ==========");
			System.out.println("Enter your choice :");
			System.out.println("0: exit");
			System.out.println("1: printTree");
			System.out.println("2: printLevelOrder");
			System.out.println("3: preOrderPrint");
			System.out.println("4: inOrderPrint");
			System.out.println("5: postOrderPrint");
			System.out.println("6: insert");
			
			switch(in.nextInt())
			{
			case 0:
				return;
			case 1:
				printTree(rootNode, 0);
			case 2:
				print(rootNode);
				break;
			case 6:
				System.out.println("value ?");
				insert(in.nextInt());
				break;
			}
		}
	}
	
	void printTree(Node root, int space)
	{
		/*
		 * Prints tree vertically which actually looks like tree
		 *         8
		 *      6
		 *         7
		 *    5  
		 *         3
		 *      2
		 *         1
		 */
		
		if(root == null)
			return;
		
		printTree(root.right, space + 5);
		
		for(int i=0; i<space; i++)
			System.out.print(" ");
		System.out.print(root.data);
		
		printTree(root.left, space + 5);
	}
	
	void print(Node root)
	{
		if(root == null)
			return;
		
		int height = height(root);
		
		for(int i=0; i<height; i++)
		{
			printLevel(root, i);
		}
	}
	
	void printLevel(Node root, int level)
	{
		if(root == null)
			return;
		
		if(level == 0)
			System.out.print(root.data + " ");
		else
		{
			printLevel(root.left, level - 1);
			printLevel(root.right, level - 1);
		}
	}
	
	public int height(Node root)
	{
		if(root == null)
			return 0;
		else
		{
			int leftHeight = height(root.left);
			int rightHeight = height(root.right);
			
			return Math.min(1 + leftHeight, 1 + rightHeight);
		}
	}
	
	public void insert(Node root, int val)
	{
		Node newnode = new Node(val);
		Node curr = root;
		Node parent = null;
		while(true)
		{
			parent = curr;
			
			if(curr == null)
			{
				curr = newnode;
				return;
			}
			
			if(val < parent.data)
				curr = parent.left;
			if(val > parent.data)
				curr = parent.right;
		}
	}
}
